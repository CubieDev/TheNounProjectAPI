
import requests, json
from requests import Request, Session
from requests_oauthlib import OAuth1
from functools import wraps, singledispatch, update_wrapper
from typing import Union, List

from keys import Keys

class Core(Keys):
    """
    API is a class allowing convenient access to the TheNounProject API.
    """

    def __init__(self, key:str = None, secret:str = None, testing:bool = False, timeout:Union[int, tuple, None] = 5):
        """
        Construct a new 'API' object.

        :param key: The API key from the TheNounProject API. (defaults to None)
        :type key: str
        :param secret: The secret key from the TheNounProject API. (defaults to None)
        :type secret: str
        :param testing: Whether the 'get_...' methods should return a PreparedRequest, 
                        instead of data from the API. (defaults to False)
        :type testing: bool
        :param timeout: Integer timeout in seconds, 2-tuples for seperate connect and read timeouts, and None for no timeout. (defaults to 5)
        :type timeout: Union[int, tuple, None]
        """
        self.api_key = key
        self.secret_key = secret
        self._testing = testing
        self._timeout = timeout
        
        self._method = "GET"
        self._base_url = "http://api.thenounproject.com"
        self._session = Session()

    def _get_oauth(self) -> OAuth1:
        """
        Asserts that both api and secret keys have been set. 

        :raise AssertionError: Raises exception when api or secret keys have not been set.

        :returns: Returns an OAuth object using this object's API and secret key.
        :rtype: OAuth1
        """
        assert isinstance(self.api_key, str), "Please set your API Key"
        assert isinstance(self.secret_key, str), "Please set your API Secret"
        return OAuth1(self.api_key, self.secret_key)

    def _send(self, url: requests.PreparedRequest) -> requests.Response:
        """
        :param url: The PreparedRequest with the method, URL and parameters for the request.
        :type url: requests.PreparedRequest

        :returns: Returns a requests.Response object generated by performing the URL request with our session.
        :rtype: requests.Response
        """
        return self._session.send(url, timeout=self._timeout)

    def _prepare_url(self, url: str, **params: dict) -> requests.PreparedRequest:
        """
        Returns a PreparedRequest object for a GET request, for the given URL, 
        with the given parameters, with authentication.

        :param url: The URL of the requested endpoint.
        :type url: str
        :param method: The request method. Eg: GET, POST.
        :type method: str
        :param params: The parameters to be added onto the string.
        :type params: dict

        :returns: A PreparedRequest object.
        :rtype: requests.PreparedRequest 
        """
        if self._session.auth is None:
            self._session.auth = self._get_oauth()
        req = Request(self._method, url, **{"params" if self._method == "GET" else "json": params})
        return self._session.prepare_request(req)
    
    def _lop_assert(self, limit, offset, page) -> None:
        """
        Asserts that limit, offset and page parameters are all integers.

        :param limit: Limit parameter to be used as a parameter in the URL request.
        :param offset: Offset parameter to be used as a parameter in the URL request.
        :param page: Page parameter to be used as a parameter in the URL request.

        :raise AssertionError: Raises exception when limit, offset or page are not of NoneType or integer type.
        """
        NoneType = type(None)

        assert isinstance(limit, (NoneType, int)), "limit argument must be an integer"
        assert isinstance(offset, (NoneType, int)), "offset argument must be an integer"
        assert isinstance(page, (NoneType, int)), "page argument must be an integer"

    def _id_assert(self, _id: int) -> None:
        """
        Asserts that the _id parameter is positive.

        :param _id: Id of which we want to make sure it is positive.
        :type _id: int

        :raise AssertionError: Raises exception when _id is not positive.
        """
        assert _id > 0, "id argument must be positive"

    def _slug_assert(self, slug: str) -> None:
        """
        Asserts that slug is nonempty, ascii, and does not contain spaces.

        :param slug: String slug parameter to be used as a parameter in the URL request.
        :type slug: str

        :raise AssertionError: Raises exception when slug is empty, contains non-ascii characters, or contains spaces.
        """
        assert len(slug) > 0, "slug argument may not be empty"
        assert slug.isascii(), "slug argument must contain ascii characters only"
        assert slug.find(" ") == -1, "slug argument may not be multiple words"

    def _term_assert(self, term:str) -> None:
        """
        Asserts that term is nonempty.

        :param term: String term parameter to be used as a parameter in the URL request.
        :type term: str

        :raise AssertionError: Raises exception when term has a length of 0.
        """
        assert len(term) > 0, "term argument may not be empty"
